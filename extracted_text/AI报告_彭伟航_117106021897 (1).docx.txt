彭伟航学习周报（20171117）

TrustShadow: Secure Execution of Unmodified
Applications with ARM TrustZone

本周继续研读论文剩余部分。

第六章runtime system：这一章主要介绍下图所示的运行时系统（runtime system）。作者从内容管理开始，

1、内存管理：TrustShadow创建三个不同的物理内存区域:安全区域（zone_tz_app）、飞安全区域（ZONE_TZ-RT和ZONE_TZ_APP）。非安全区域可以被正常的和安全的世界所访问，而安全区域必须通过安全的世界来访问。为shadow HAP指定安全区域ZONE_TZ_APP，指定运行时系统和非安全区域ZONE_TZ_RT ZONE_NORMAL用于保存Linux操作系统和其他普通进程。



Forwarding Exceptions 

TrustShadow支持在安全的世界中执行遗留的Linux代码。 因此，设计安全世界的虚拟地址，以遵循与Linux操作系统中相同的用户/内核内存拆分。



处理页面错误

页面错误是由于读取指令或访问数据失败而导致的一种异常。一般来说，由操作系统来维护应用程序的页面表。但是，考虑到操作系统可能是恶意的，可以篡改应用程序的页面表，所以设计中把这些页面表放置在安全的世界中，将这些页面表与操作系统隔离。 运行时系统利用Linux OS提供的页面错误处理程序来更新它们的条目。为了利用页面错误处理程序，作者修改了Linux中现有的按需页面错误处理机制。 在检索更新信息之后，在安装页表条目之前，运行时系统验证返回的信息。

干预系统调用

将系统调用转发到操作系统时会引发两个问题。 首先，由于隔离，操作系统内核不能访问shadow HAP的地址空间，而某些系统调用服务依赖于来自用户空间的输入数据。 其次，操作系统返回的结果不可信，可能会导致潜在的攻击（比如lago攻击，文中简要的说明了如何抵御lago攻击)。Runtime system协调HAP和OS，向OS提供基本的服务请求数据，并验证来自不可信操作系统的响应。

内部异常处理

 

是具体的实施

作者在Freescale i.MX6q ARM开发板上实现了TrustShadow。

Freescale i.MX6q ARM开发板：集成了ARM Cortex-A9 MPCore处理器，1GB DDR3 DRAM和256KB iRAM。

作者分别从secure world和normal world两个方面俩描述实现的细节。

Secure World：



使用高保证启动（HAB），首先引导专有ROM来加载运行时系统的映像。 然后，它执行并验证检查图像的完整性。 通过完整性检查后，运行系统启动，使用TZASC配置内存区域ZONE_TZ_RT，ZONE_NORMAL和ZONE_TZ_APP的访问策略。 为了保证策略不会被恶意更改，运行时会锁定配置。 因此，对策略的进一步修改需要重启系统。

初始化成功后，运行时系统加载uboot binary [44]，进一步启动上面实现的Linux系统。 Linux系统运行在normal world中，它检索清单以及存储在持久存储上的公钥/私钥对。 请注意，我们的实施使用存储在飞思卡尔i.MX6q板上的256位可清零主密钥（ZMK）预先加密公钥/私钥对。 这确保密钥对不会以纯文本形式向Linux公开。为了便于安全引导，Linux系统将清单和公钥/私钥对传递给运行时系统，进一步解密密钥对并安装清单。 在这个过程完成之后，运行时将执行传递回Linux系统。

Normal World:

主要是对内核版本为3.18.24的Linux操作系统发行版进行了以下7点更改:

(1)我们添加了内核参数tz_mem = size @ start，它表示用于HAPs的内存区域，即ZONE_TZ_APP。

（2）改变了基于区域的分配器，以确保指定为影子HAP的页面必须来自指示的内存区域由tz_mem 开始。 

（3）在task_struct中添加了一个tz标志，以使操作系统能够区分HAP。 

（4）为了在Linux中启动HAP，实现了一个新的系统调用tz_execve。 

（5）改变了ret_to_user和ret_fast_syscall的控制流程，以便Linux操作系统可以将执行回传给相应的shadow HAP而不是僵尸HAP。

  （6）挂钩页面错误处理程序，以便它可以为运行时系统准备页面表更新信息。

  （7）修改了代码处理信号，以便在编组缓冲区中建立一个信号栈，并为HAP做好准备。总的来说，这些变化会向Linux内核引入大约300个LOC。



中作者进行大量实验来评估TrustShadow，首先探讨TrustShadow对原始操作系统操作的影响。其次，作者量化TrustShadow施加的I / O操作的开销。最后，运行真实环境中的应用程序，并研究系统引入的整体性能开销。作者从4个方面进行了实验并分别总结成表，

结果都显示，TrustShadow并不会带来太大的开销，对应用程序性能或者嵌入式服务器的影响都在可接受的范围之内。



是总结和讨论

作者总结了TrustShadow如何抵御对HAP操作系统级别的攻击。 然后还分析了TrustShadow的安全性，量化其TCB，并讨论剩余的攻击面（Remaining Attack Surface ）。

TrustShadow从三个方面保护应用程序。（1）通过验证程序映像完整性的机制，攻击者无法在加载时操作应用程序代码/数据。（2）资源隔离和内省机制，攻击者不能在运行时干扰HAP的执行。（3）使用加密机制对文件进行加密并对元数据进行签名，攻击者就不能再读取受保护的文件或对其进行任何修改。

作者精心设计的运行时系统的TrustShadow，可以屏蔽在多编程IoT设备上运行的应用程序。 借助TrustShadow，即使面对整体操作系统的妥协，这些设备上的安全关键型应用程序也可以得到全面的保护。与以前提出的技术不同，TrustShadow的设计不需要修改应用程序。因此，无需重新设计应用程序即可保证安全。由于TrustShadow只对物联网设备附加了微不足道（偶尔中等开销）的影响，因此可轻松实现应用程序的保护。